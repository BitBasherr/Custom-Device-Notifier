name: CI-dev

on:
  push:
  pull_request:

# one workflow run per PR/branch – later pushes cancel the previous run
concurrency:
  group: ci-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  lint-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        # fail fast, unset-var errors, and show every command
        shell: "bash -euo pipefail {0}"

    steps:
    # ────────────────── 1 ▸ Checkout ──────────────────
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0                # we need history to push back fixes
        persist-credentials: false    # we’ll push with PAT, not GITHUB_TOKEN

    # ────────────────── 2 ▸ Python for the job ──────────────────
    - uses: actions/setup-python@v5
      with:
        python-version: "3.13"
        cache: "pip"
        cache-dependency-path: |
          .tools/requirements-ci.txt
          .tools/constraints.txt
          pyproject.toml

    # ────────────────── 3 ▸ Phase-1: lightweight format tools ──────────────────
    - name: Install formatters (Black / Ruff / Flake8 only)
      run: |
        python -m pip install --upgrade pip
        pip install black "ruff>=0.3" flake8

    - name: Run formatters (write mode)
      run: |
        black .
        ruff format .

    # ────────────────── 4 ▸ Commit & push fixes (PAT) ──────────────────
    - name: Commit & push formatting fixes
      id: commit
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        git config user.name  "ci-bot"
        git config user.email "ci-bot@users.noreply.github.com"
        git add -u
        if git diff --cached --quiet; then
          echo "pushed=false" >> "$GITHUB_OUTPUT"
        else
          git commit -m "style: auto-format via CI"
          git push "https://${GH_PAT}@github.com/${{ github.repository }}.git" \
                   HEAD:${{ github.head_ref || 'main' }}"
          echo "pushed=true" >> "$GITHUB_OUTPUT"
        fi

    # ────────────────── 5 ▸ Short-circuit if we just pushed ──────────────────
    - name: Stop job after pushing fixes
      if: steps.commit.outputs.pushed == 'true'
      run: echo "Formatting fixes pushed – skipping lint/tests." && exit 0

    # ────────────────── 6 ▸ Phase-2: full dependency install ──────────────────
    - name: Install project & test requirements
      run: |
        # main requirements
        pip install -r .tools/requirements-ci.txt -c .tools/constraints.txt
        # ✱ compatibility pin – pytest-async fixtures need Pytest < 8
        pip install "pytest<8" "pytest-asyncio<1"

    # ────────────────── 7 ▸ Cache mypy’s incrementals ──────────────────
    - uses: actions/cache@v4
      with:
        path: .mypy_cache
        key: >-
          mypy-${{ runner.os }}-${{ hashFiles('.tools/requirements-ci.txt',
                                             '.tools/constraints.txt',
                                             'pyproject.toml') }}-v1
        restore-keys: mypy-${{ runner.os }}-

    # ────────────────── 8 ▸ Lint / type-check (verify only) ──────────────────
    - name: Lint & type-check
      run: |
        ruff check .
        black --check .
        flake8 . --max-line-length 88
        mypy custom_components/custom_device_notifier/__init__.py \
             --config-file custom_components/custom_device_notifier/pyproject.toml

    # ────────────────── 9 ▸ Unit tests ──────────────────
    - name: Run tests
      run: pytest -q